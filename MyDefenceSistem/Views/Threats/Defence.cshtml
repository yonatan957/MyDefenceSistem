@{
    ViewData["Title"] = "Defence";
}

<h2>חדר מצב</h2>

<div id="specialMessages" class="alert"></div>

<div id="tableContainer">
    <h3>איומים פעילים</h3>
    <table id="queue1Table" class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Threat ID</th>
                <th>מקום שיגור</th>
                <th>זמן שיגור</th>
                <th>סוג נשק</th>
                <th>כמות טילים</th>
                <th>זמן לפגיעה</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
    <button id="sendmissle" class="btn btn-primary">שגר</button>

    <h3>איומים שיורטו</h3>
    <table id="queue2Table" class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Threat ID</th>
                <th>מקום שיגור</th>
                <th>זמן שיגור</th>
                <th>סוג נשק</th>
                <th>כמות טילים שיורטו</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>

    <h3>איומים שפגעו</h3>
    <table id="queue3Table" class="table table-striped table-bordered">
        <thead>
            <tr>
                <th>Threat ID</th>
                <th>מקום שיגור</th>
                <th>זמן שיגור</th>
                <th>סוג נשק</th>
                <th>כמות טילים</th>
            </tr>
        </thead>
        <tbody>
        </tbody>
    </table>
</div>

@section scripts {
    <script src="~/lib/signalr/signalr.min.js"></script>
    <script type="text/javascript">
        const connection = new signalR.HubConnectionBuilder().withUrl("/threat_hub").build();

        // קבלת הודעות מה-Hub
        connection.on("BE_ReciveThreatsQueue", function (queue1) {
            console.log(queue1);
            populateTable(queue1, "#queue1Table");
        });

        connection.on("ReceiveQueue", function (queue2) {
            populateTable3(queue2, "#queue2Table");
        });

        connection.on("ReceiveQueue", function (queue3) {
            populateTable2(queue3, "#queue3Table");
        });
        connection.on("ReciveUpdate", function (id, time) {
            updatetime(id, time)
        })

        connection.on("SpecialMessage", function (message) {
            displaySpecialMessage(message);
        });

        connection.start()
            .then(function () {
                connection.invoke("SendInitialRequest")
            }).catch(function (err) {
                return console.error(err.toString());
            });

        document.getElementById("sendmissle").addEventListener("click", function () {
            connection.invoke("sendmissle").catch(function (err) {
                return console.error(err.toString());
            });
        });

        function populateTable(queue, tableId) {
            const tableBody = document.querySelector(tableId + " tbody");
            tableBody.innerHTML = ""; // clear existing rows

            queue.forEach(function (threat) {
                const row = document.createElement("tr");

                row.innerHTML = `
                                    <td>${threat.threatId}</td>
                                    <td>${threat.origin ? threat.origin.name : ''}</td>
                                    <td>${threat.launchTime ? new Date(threat.launchTime).toLocaleString() : ''}</td>
                                    <td>${threat.weapon ? threat.weapon.type : ''}</td>
                                    <td>${threat.missleQuantity}</td>
                                    <td>לא מוגדר</td>
                                `;

                tableBody.appendChild(row);
            });
        }
        function populateTable2(queue, tableId) {
            const tableBody = document.querySelector(tableId + " tbody");
            tableBody.innerHTML = ""; // clear existing rows

            queue.forEach(function (threat) {
                if (threat.missleQuantity === 0) {
                    return;
                }
                const row = document.createElement("tr");

                row.innerHTML = `
                                            <td>${threat.threatId}</td>
                                            <td>${threat.origin ? threat.origin.name : ''}</td>
                                            <td>${threat.launchTime ? new Date(threat.launchTime).toLocaleString() : ''}</td>
                                            <td>${threat.weapon ? threat.weapon.type : ''}</td>
                                            <td>${threat.missleQuantity}</td>
                                        `;

                tableBody.appendChild(row);
            });
        }
        function populateTable3(queue, tableId) {
            const tableBody = document.querySelector(tableId + " tbody");
            tableBody.innerHTML = ""; // clear existing rows

            queue.forEach(function (threat) {
                if (threat.hitted === 0) {
                    return;
                }
                const row = document.createElement("tr");

                row.innerHTML = `
                            <td>${threat.threatId}</td>
                            <td>${threat.origin ? threat.origin.name : ''}</td>
                            <td>${threat.launchTime ? new Date(threat.launchTime).toLocaleString() : ''}</td>
                            <td>${threat.weapon ? threat.weapon.type : ''}</td>
                            <td>${threat.hitted}</td>
                                                `;

                tableBody.appendChild(row);
            });
        }
        function displaySpecialMessage(message) {
            const specialMessagesDiv = document.getElementById("specialMessages");
            specialMessagesDiv.innerHTML = message;
            specialMessagesDiv.classList.add("alert-success");
            setTimeout(() => {
                specialMessagesDiv.innerHTML = "";
                specialMessagesDiv.classList.remove("alert-success");
            }, 5000);
        }
        function updatetime(id, time) {
            const tableBody = document.querySelector("#queue1Table tbody");

            // Find the row with the matching threatId
            const row = Array.from(tableBody.querySelectorAll("tr")).find(tr => {
                return tr.querySelector("td").innerText === id.toString();
            });

            if (row) {
                const timeCell = row.querySelector("td:nth-child(6)"); // The 6th column for "זמן לפגיעה"

                // Update the time cell with the remaining time
                if (time <= 0) {
                    timeCell.innerText = "פוגע";
                } else {
                    timeCell.innerText = time;
                }
            }
        }
    </script>
    <style>
        #tableContainer {
            margin-top: 20px;
        }

        .table {
            width: 100%;
            margin-bottom: 20px;
            border-collapse: collapse;
        }

            .table th, .table td {
                padding: 10px;
                text-align: left;
                border: 1px solid #ddd;
            }

        .table-striped tbody tr:nth-of-type(odd) {
            background-color: #f9f9f9;
        }

        .table-bordered {
            border: 1px solid #ddd;
        }

        #sendmissle {
            margin-top: 15px;
            margin-bottom: 30px;
            display: block;
        }

        .alert {
            padding: 10px;
            margin-bottom: 20px;
            border: 1px solid transparent;
            border-radius: 5px;
            color: #ffffff;
            background-color: #4caf50; /* צבע ירוק להודעות */
            font-size: 16px;
            text-align: center;
        }

        .alert-success {
            background-color: #4caf50;
        }
    </style>
}
